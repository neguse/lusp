
require("busted.runner")
require("types")

describe("symbol test", function()

	describe("given same symbol", function()
		local s_a = Symbol.new("a")
		it("should equal", function()
			assert.are.equal(s_a, s_a)
		end)
	end)

	describe("given different symbol", function()
		local s_a = Symbol.new("a")
		local s_b = Symbol.new("b")
		it("should not equal", function()
			assert.are_not.equal(s_a, s_b)
		end)
	end)

	describe("given two symbol from same string", function()
		local s_a1 = Symbol.new("a")
		local s_a2 = Symbol.new("a")
		it("should equal", function()
			assert.are.equal(s_a1, s_a2)
		end)
	end)
end)

describe("cons test", function()

	describe("given cons", function()
		local c = Cons.new(1, 2)
		it("should retrieve car and cdr", function()
			assert.are.equal(c:car(), 1)
			assert.are.equal(c:cdr(), 2)
		end)
		it("should overwrite with set_car", function()
			c:set_car(3)
			assert.are.equal(c:car(), 3)
		end)
		it("should overwrite with set_cdr", function()
			c:set_cdr(4)
			assert.are.equal(c:cdr(), 4)
		end)
	end)
end)

describe("types test", function()
	it("tests various types", function()
		assert.are.equal(ltype(nil), 'nil')
		assert.are.equal(ltype(1), 'number')
		assert.are.equal(ltype('1'), 'string')
		assert.are.equal(ltype(true), 'boolean')
		assert.are.equal(ltype(Cons.new(1, 1)), 'cons')
		assert.are.equal(ltype(Symbol.new('s')), 'symbol')
		assert.are.equal(ltype({}), 'unknown')
	end)
end)
