
require("busted.runner")
require("lisp")
require("support")

describe("true_p test", function()
	it("tests various types", function()
		assert.False(true_p(nil))
		assert.True(true_p(true))
		assert.False(true_p(false))
		assert.False(true_p(0))
		assert.False(true_p(1))
		assert.False(true_p(""))
		assert.False(true_p("a"))
		assert.False(true_p(Symbol.new("a")))
		assert.False(true_p(Cons.new("a", "b")))
	end)
end)

describe("tagged_list_p test", function()
	assert.True(tagged_list_p(Cons.new(Symbol.new('a'), nil), Symbol.new('a')))
	assert.False(tagged_list_p(Cons.new(Symbol.new('a'), nil), Symbol.new('b')))
	assert.False(tagged_list_p(Cons.new(1, nil), Symbol.new('a')))
end)

describe("compound_procedure test", function()
	p = make_procedure('params', 'body', 'env')
	assert.True(compound_procedure_p(p))
	assert.are.equal(procedure_parameters(p), 'params')
	assert.are.equal(procedure_body(p), 'body')
	assert.are.equal(procedure_environment(p), 'env')
end)
